/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
   int  func(TreeNode* root,unordered_map<int,int>&mp){
        if(root==NULL) return 0;
        int leftSum=func(root->left,mp);
        int rightSum=func(root->right,mp);
        mp[leftSum+rightSum+root->val]++;
       return leftSum+rightSum+root->val;
    }
public:
    vector<int> findFrequentTreeSum(TreeNode* root) {
        if(root==NULL) return {};
        unordered_map<int,int>mp;
        vector<int>result;
        int toalSum=func(root,mp);
        int mx=INT_MIN;
        for(auto x:mp)mx=max(mx,x.second);
        for(auto x:mp) if(x.second==mx)result.push_back(x.first);
        return result;
    }
};
